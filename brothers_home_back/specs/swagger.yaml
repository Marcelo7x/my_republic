openapi: 3.0.0
info:
  description: "API Brohers Home"
  version: "1.0.0"
  title: "Brohers Home"
servers:
  - url: http://localhost:3001
    description: Local server
tags:
- name: "auth"
  description: "Access to auth"
- name: "user"
  description: "Access to User"
- name: "invoice"
  description: "Access to Invoice"

paths:
  /auth/login:
    get:
      tags:
        - 'auth'
      summary: login with credentials(email/password)
      security: 
        - basicAuth: []
      responses:
        '200':
          description: ''
          content:
             application/json:
              schema:  
                $ref: '#/components/schemas/Tokenization'
        '403':
          description: ''
          content:
             application/json:
              schema: 
                $ref: '#/components/schemas/BackendException'
        '404':
          description: ''
          content:
             application/json:
              schema: 
                $ref: '#/components/schemas/BackendException'
  /auth/check_token:
    get:
      tags:
        - 'auth'
      summary: check bearer token
      security: 
        - bearerAuth: []
      responses:
        '200':
          description: ''
          content:
             application/json:
              schema:  
                type: object 
                properties:
                  message:
                    type: string
        '403':
          description: ''
          content:
             application/json:
              schema: 
                $ref: '#/components/schemas/BackendException'
        '404':
          description: ''
          content:
             application/json:
              schema: 
                $ref: '#/components/schemas/BackendException'
  /auth/refresh_token:
    get:
      tags:
        - 'auth'
      summary: refresh bearer token
      security: 
        - bearerRefreshAuth: []
      responses:
        '200':
          description: ''
          content:
             application/json:
              schema:  
                $ref: '#/components/schemas/Tokenization'
        '403':
          description: ''
          content:
             application/json:
              schema: 
                $ref: '#/components/schemas/BackendException'
        '404':
          description: ''
          content:
             application/json:
              schema: 
                $ref: '#/components/schemas/BackendException'
  /auth/update_password:
    put:
      tags:
        - 'auth'
      summary: update password
      security: 
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password: 
                  type: string
                newPassword: 
                  type: string
      responses:
        '200':
          description: ''
          content:
             application/json:
              schema:  
                type: object 
                properties:
                  message:
                    type: string
        '403':
          description: ''
          content:
             application/json:
              schema: 
                $ref: '#/components/schemas/BackendException'
        '404':
          description: ''
          content:
             application/json:
              schema: 
                $ref: '#/components/schemas/BackendException'

  /user/{id}:
    get:
      tags:
        - 'user'
      security: 
        - bearerAuth: []
      summary: get user by id
      parameters: 
        - in: path 
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: ''
          content:
             application/json:
              schema:  
                $ref: '#/components/schemas/User'
        '404':
          description: ''
          content:
             application/json:
              schema: 
                $ref: '#/components/schemas/BackendException'
    delete:
      tags:
        - 'user'
      summary: delete user by id
      security: 
        - bearerAuth: []
      parameters: 
        - in: path 
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: ''
          content:
             application/json:
              schema: 
                type: object 
                properties: 
                  message: 
                    type: string 
        '404':
          description: ''
          content:
             application/json:
              schema: 
                $ref: '#/components/schemas/BackendException'

  /user:
    get:
      tags:
        - 'user'
      summary: get all user
      security: 
        - bearerAuth: []
      responses:
        '200':
          description: ''
          content:
             application/json:
              schema: 
                type: array 
                items: 
                  $ref: '#/components/schemas/User'
        '404':
          description: ''
          content:
             application/json:
              schema: 
                $ref: '#/components/schemas/BackendException'
    post:
      tags:
        - 'user'
      summary: create new user

      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '200':
          description: ''
          content:
             application/json:
              schema: 
                type: array 
                items: 
                  $ref: '#/components/schemas/User'
        '404':
          description: ''
          content:
             application/json:
              schema: 
                $ref: '#/components/schemas/BackendException'
    put:
      tags:
        - 'user'
      summary: Update user
      security: 
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: ''
          content:
             application/json:
              schema: 
                type: array 
                items: 
                  $ref: '#/components/schemas/User'
        '404':
          description: ''
          content:
             application/json:
              schema: 
                $ref: '#/components/schemas/BackendException'


  /invoice:
    post:
      tags:
        - 'invoice'
      summary: create new invoice

      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoiceCreate'
      responses:
        '200':
          description: ''
          content:
             application/json:
              schema: 
                type: array 
                items: 
                  $ref: '#/components/schemas/Invoice'
        '404':
          description: ''
          content:
             application/json:
              schema: 
                $ref: '#/components/schemas/BackendException'
    put:
      tags:
        - 'invoice'
      summary: Update invoice
      security: 
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Invoice'
      responses:
        '200':
          description: ''
          content:
             application/json:
              schema: 
                type: array 
                items: 
                  $ref: '#/components/schemas/Invoice'
        '404':
          description: ''
          content:
             application/json:
              schema: 
                $ref: '#/components/schemas/BackendException'

  /invoice/invoiceid/{invoiceid}:
    get:
      tags:
        - 'invoice'
      security: 
        - bearerAuth: []
      summary: get invoice by invoiceid
      parameters: 
        - in: path 
          name: invoiceid
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: ''
          content:
             application/json:
              schema:  
                $ref: '#/components/schemas/Invoice'
        '404':
          description: ''
          content:
             application/json:
              schema: 
                $ref: '#/components/schemas/BackendException'
    delete:
      tags:
        - 'invoice'
      summary: delete invoice by invoiceid
      security: 
        - bearerAuth: []
      parameters: 
        - in: path 
          name: invoiceid
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: ''
          content:
             application/json:
              schema: 
                type: object 
                properties: 
                  message: 
                    type: string 
        '404':
          description: ''
          content:
             application/json:
              schema: 
                $ref: '#/components/schemas/BackendException'
     
  /invoice/homeid/{homeid}/start/{start_date}/end/{end_date}:
    get:
      tags:
        - 'invoice'
      summary: get all invoice from interval date
      security: 
        - bearerAuth: []
      parameters: 
        - in: path 
          name: homeid
          required: true
          schema:
            type: integer
        - in: path
          name: start_date
          required: true
          schema:
            type: string
        - in: path 
          name: end_date
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
             application/json:
              schema: 
                type: array 
                items: 
                  $ref: '#/components/schemas/Invoice'
        '404':
          description: ''
          content:
             application/json:
              schema: 
                $ref: '#/components/schemas/BackendException'

components:
  securitySchemes:
    basicAuth:   
      type: http
      scheme: basic
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Auth header (Authorization) Access Token"
    bearerRefreshAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "RefreshToken"
  schemas:
    Tokenization:
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
    User:
      type: object
      properties:
        userid:
          type: integer
        name:
          type: string
        email:
          type: string
        role:
          type: string
          default: user
          enum:
            - "dev"
            - "admin"
            - "manager"
    UserCreate:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          type: string
          default: user
          enum:
            - "dev"
            - "admin"
            - "manager"
    Invoice:
      type: object
      properties:
        invoiceid:
          type: integer
        description:
          type: string
        category:
          type: string
        date:
          type: date
        price:
          type: integer
        fixed:
          type: boolean
        image:
          type: byte
        userid:
          type: integer
        homeid:
          type: integer
        paid:
          type: string
          default: unpaid
          enum:
            - "unpaid"
            - "payed"
            - "anypayed"

    InvoiceCreate:
      type: object
      properties:
        description:
          type: string
        categoryid:
          type: integer
        date:
          type: date
        price:
          type: integer
        fixed:
          type: boolean
        image:
          type: byte
        userid:
          type: integer
        homeid:
          type: integer
        paid:
          type: string
          default: unpaid
          enum:
            - "unpaid"
            - "payed"
            - "anypayed"

    BackendException:
      type: object 
      properties:
        error: 
          type: string